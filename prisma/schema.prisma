generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model ar_internal_metadata {
  key        String   @id @db.VarChar
  value      String?  @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
}

model categories {
  id               BigInt       @id @default(autoincrement())
  name             String       @unique(map: "index_categories_on_name") @db.VarChar
  parent_id        BigInt?
  is_active        Boolean?     @default(false)
  created_at       DateTime     @db.Timestamp(6)
  updated_at       DateTime     @db.Timestamp(6)
  categories       categories?  @relation("categoriesTocategories_parent_id", fields: [parent_id], references: [id], onDelete: Cascade, onUpdate: NoAction, map: "fk_rails_82f48f7407")
  other_categories categories[] @relation("categoriesTocategories_parent_id")
  jobs             jobs[]

  @@index([parent_id], map: "index_categories_on_parent_id")
}

model countries {
  id           BigInt   @id @default(autoincrement())
  is_active    Boolean? @default(false)
  is_collected Boolean? @default(false)
  name         String   @unique(map: "index_countries_on_name") @db.VarChar
  region       String   @db.VarChar
  subregion    String   @db.VarChar
  google_uule  String   @db.VarChar
  google_gl    String   @db.VarChar
  google_hl    String?  @db.VarChar
  created_at   DateTime @db.Timestamp(6)
  updated_at   DateTime @db.Timestamp(6)
  states       states[]
}

model states {
  id           BigInt    @id @default(autoincrement())
  country_id   BigInt
  is_active    Boolean?  @default(false)
  is_collected Boolean?  @default(false)
  name         String    @db.VarChar
  google_uule  String    @db.VarChar
  created_at   DateTime  @db.Timestamp(6)
  updated_at   DateTime  @db.Timestamp(6)
  countries    countries @relation(fields: [country_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_40bd891262")
  cities       cities[]

  @@index([country_id], map: "index_states_on_country_id")
  @@index([name], map: "index_states_on_name")
}

model cities {
  id         BigInt   @id @default(autoincrement())
  state_id   BigInt
  name       String   @db.VarChar
  is_active  Boolean? @default(true)
  latitude   String   @db.VarChar
  longitude  String   @db.VarChar
  slug       String?  @unique(map: "index_cities_on_slug") @db.VarChar
  created_at DateTime @db.Timestamp(6)
  updated_at DateTime @db.Timestamp(6)
  states     states   @relation(fields: [state_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_59b5e22e07")
  jobs       jobs[]

  @@index([name], map: "index_cities_on_name")
  @@index([state_id], map: "index_cities_on_state_id")
}

model cities_not_found {
  id         BigInt   @id @default(autoincrement())
  state_id   BigInt
  name       String   @db.VarChar
  created_at DateTime @db.Timestamp(6)

  @@index([name], map: "index_cities_not_found_on_name")
  @@index([state_id], map: "index_cities_not_found_on_state_id")
}


model companies {
  id          String    @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  is_customer Boolean?  @default(false)
  name        String?   @db.VarChar
  slug        String?   @unique(map: "index_companies_on_slug") @db.VarChar
  created_at  DateTime  @db.Timestamp(6)
  updated_at  DateTime  @db.Timestamp(6)
  deleted_at  DateTime? @db.Timestamp(6)
  jobs        jobs[]
}

model employees {
  id                     BigInt    @id @default(autoincrement())
  name                   String
  email                  String    @unique(map: "index_employees_on_email") @default("") @db.VarChar
  encrypted_password     String    @default("") @db.VarChar
  reset_password_token   String?   @unique(map: "index_employees_on_reset_password_token") @db.VarChar
  reset_password_sent_at DateTime? @db.Timestamp(6)
  remember_created_at    DateTime? @db.Timestamp(6)
  sign_in_count          Int       @default(0)
  current_sign_in_at     DateTime? @db.Timestamp(6)
  last_sign_in_at        DateTime? @db.Timestamp(6)
  current_sign_in_ip     String?   @db.VarChar
  last_sign_in_ip        String?   @db.VarChar
  confirmation_token     String?   @unique(map: "index_employees_on_confirmation_token") @db.VarChar
  confirmed_at           DateTime? @db.Timestamp(6)
  confirmation_sent_at   DateTime? @db.Timestamp(6)
  unconfirmed_email      String?   @db.VarChar
  created_at             DateTime  @db.Timestamp(6)
  updated_at             DateTime  @db.Timestamp(6)
}

model jobs {
  id             String     @id @default(dbgenerated("gen_random_uuid()")) @db.Uuid
  category_id    BigInt
  company_id     String     @db.Uuid
  city_id        BigInt
  is_active      Boolean?   @default(false)
  title          String?    @db.VarChar
  description    String?
  via            String?    @db.VarChar
  link           String?    @db.VarChar
  published_at   DateTime?  @db.Timestamp(6)
  time_zone      String?    @db.VarChar
  gogole_job_id  String?    @unique(map: "index_jobs_on_gogole_job_id") @db.VarChar
  created_at     DateTime   @db.Timestamp(6)
  updated_at     DateTime   @db.Timestamp(6)
  deleted_at     DateTime?  @db.Timestamp(6)
  deleted_reason String?    @db.VarChar
  categories     categories @relation(fields: [category_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_1cf0b3b406")
  cities         cities     @relation(fields: [city_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_54d543406a")
  companies      companies  @relation(fields: [company_id], references: [id], onDelete: NoAction, onUpdate: NoAction, map: "fk_rails_b34da78090")

  @@index([category_id], map: "index_jobs_on_category_id")
  @@index([city_id], map: "index_jobs_on_city_id")
  @@index([company_id], map: "index_jobs_on_company_id")
}

model schema_migrations {
  version String @id @db.VarChar
}


